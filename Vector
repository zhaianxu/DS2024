typedef int Rank;//秩
#define DEFAULT_CAPACITY 3 //默认的初始容量(实际应用中可设置为更大)

template <typename T> class Vector { //向量模板类
protected:
    Rank_size; int_capacity; T*elem;//规模、容量、数据区
    void copyFrom( T const *A, Rank lo, Rank hi ); //复制数组区间A[lo，hi)
    void expand(); //空间不足时扩容
    void shrink(); //装填因子过小时压缩
    bool bubble ( Rank lo, Rank hi ); //扫描交换
    void bubbleSort ( Rank lo, Rank hi ); //起泡排序算法
    Rank max ( Rank lo,Rank hi ); //选职最大元系
    void selectionSort ( Rank lo,Rank hi ); //选择排序算法
    void merge ( Rank lo, Rank mi, Rank hi ); //归井算法
    void mergeSort ( Rank lo, Rank hi ); //归井排序算法
    Rank partition ( Rank lo, Rank hi ); //轴点构造舞法
    void quickSort( Rank lo, Rank hi ); //快速排序算法
    void heapSort( Rank lo,Rank hi ); //堆排序(稍后结合完全堆讲解
public:
//构造函数
    Vector ( int c = DEFAULT_CAPACITY, int s = 0, T v = 0 ) //容量为c、规模为s、所有元素初始为v
    { _elem = new T[_capacity = c]; for ( _size = 0; _size < s; _elem[_size++] = v); } 
    Vector ( T const* A, Rank n ) {copyFrom ( A, 0, n ); } //数组整体复制
    Vector ( T const* A, Rank lo, Rank hi ) { copyFrom ( A, lo, hi ); } //区间
    Vector ( Vector<T> const& V ) { copyFrom ( V._elem, 0, V._size ); } //向量整体复制
    Vector ( Vector<T> const& V, Rank lo, Rank hi ) { copyFrom ( V._elem, lo, hi ); }//区河
    //析构函数 
    ~Vector() { delete [] _elem; }//释放内部空间
    //只读访问接口
    Rank size() const { return _size; } //规模
    bool empty() const { return !_size; }//判空
    int disordered() const; //判新向量是否已排序
    Rank find ( T const& e ) const { return find ( e, 0, _size ); } //无序向量整体査找
    Rank find( T const& e, Rank lo, Rank hi ) const; //无序向量区间查找
    Rank search ( T const& e ) const //有序向量整体查找
    { return ( 0 >= _size ) ? -1 : search ( e, 0, _size ); }
    Rank search ( T const& e, Rank lo, Rank hi ) const; //有序向量区间查找
//可访问接口
    T& operator[] ( Rank r ) const; //重载下标操作符，可以类似于数组形式引用各元素
    Vector<T> & operator= ( Vector<T> const& ); //重载赋值操作符，以便直接克隆向量
    T remove ( Rank r ); //删除秩为r的元素
    int remove ( Rank lo, Rank hi ); //删除秩在区间[lo,hi)之内的元素
    Rank insert ( Rank r, T const& e ); //插入元素
    Rank insert ( T const& e ) { return insert ( _size, e ); } //默认作为末元素插入
    void sort ( Rank lo, Rank hi); //对[1o，hi)排序
    void sort() { sort ( 0, size ); } //整体排序
    void unsort ( Rank lo, Rank hi ); //对[1o,hi)置乱
    void unsort() { unsort (0, size ); } //整体置乱
    int deduplicate(); //无序去重
    int uniquify(); //有序去重
// 遍历
    void traverse ( void (*) ( T& ) ); //遍历(使用函数指针，只读或局部性修改)
    template <typename VST> void traverse ( VST& ); //遍历(使用函数对象，可全局性修改)
};//Vector

template <typename T>
void Vector<T>::copyFrom(T const *A, Rank lo, Rank hi) {
    _size = hi - lo;
    _capacity = _size + 10; 
    _elem = new T[_capacity];
    for (Rank i = 0; i < _size; ++i) {
        _elem[i] = A[lo + i];
    }
}

template <typename T>
void Vector<T>::expand() {
    if (_size < _capacity) return;
    T* newElem = new T[_capacity * 2];
    for (Rank i = 0; i < _size; ++i) {
        newElem[i] = _elem[i]; 
    }
    delete[] _elem;
    _elem = newElem;
    _capacity *= 2; 
}

template <typename T>
void Vector<T>::shrink() {
    if (_size > _capacity / 4) return;
    T* newElem = new T[_capacity / 2];
    for (Rank i = 0; i < _size; ++i) {
        newElem[i] = _elem[i];
    }
    delete[] _elem; 
    _elem = newElem;
    _capacity /= 2;
}

template <typename T>
bool Vector<T>::bubble(Rank lo, Rank hi) {
    bool swapped = false; 
    for (Rank i = lo; i < hi - 1; ++i) {
        if (_elem[i] > _elem[i + 1]) {
            std::swap(_elem[i], _elem[i + 1]);
            swapped = true; 
        }
    }
    return swapped;
}

template <typename T>
void Vector<T>::bubbleSort(Rank lo, Rank hi) {
    do {
    } while (bubble(lo, hi));
}

template <typename T>
Rank Vector<T>::max(Rank lo, Rank hi) {
    Rank maxIndex = lo; 
    for (Rank i = lo + 1; i < hi; ++i) {
        if (_elem[i] > _elem[maxIndex]) { 
            maxIndex = i; 
        }
    }
    return maxIndex;
}

template <typename T>
void Vector<T>::selectionSort(Rank lo, Rank hi) {
    for (Rank i = lo; i < hi - 1; ++i) {
        Rank minIndex = i; 
        for (Rank j = i + 1; j < hi; ++j) {
            if (_elem[j] < _elem[minIndex]) {
                minIndex = j;
            }
        }
        if (minIndex != i) {
            std::swap(_elem[i], _elem[minIndex]); 
        }
    }
}

template <typename T>
void Vector<T>::merge(Rank lo, Rank mi, Rank hi) {
    Rank leftSize = mi - lo;
    Rank rightSize = hi - mi;
    T* left = new T[leftSize];
    T* right = new T[rightSize];

    for (Rank i = 0; i < leftSize; ++i) {
        left[i] = _elem[lo + i]; 
    }
    for (Rank i = 0; i < rightSize; ++i) {
        right[i] = _elem[mi + i]; 
    }

    Rank i = 0, j = 0, k = lo;
    while (i < leftSize && j < rightSize) {
        if (left[i] <= right[j]) {
            _elem[k++] = left[i++];
        } else {
            _elem[k++] = right[j++];
        }
    }
    while (i < leftSize) {
        _elem[k++] = left[i++];
    }
    while (j < rightSize) {
        _elem[k++] = right[j++];
    }

    delete[] left;
    delete[] right; 
}

template <typename T>
void Vector<T>::mergeSort(Rank lo, Rank hi) {
    if (hi - lo < 2) return; 
    Rank mi = (lo + hi) / 2; 
    mergeSort(lo, mi); 
    mergeSort(mi, hi); 
    merge(lo, mi, hi); 
}

template <typename T>
Rank Vector<T>::partition(Rank lo, Rank hi) {
    T pivot = _elem[hi - 1];
    Rank i = lo; 
    for (Rank j = lo; j < hi - 1; ++j) {
        if (_elem[j] < pivot) {
            std::swap(_elem[i], _elem[j]); 
            i++;
        }
    }
    std::swap(_elem[i], _elem[hi - 1]);
    return i; 
}

template <typename T>
void Vector<T>::quickSort(Rank lo, Rank hi) {
    if (lo < hi - 1) { 
        Rank pivotIndex = partition(lo, hi); 
        quickSort(lo, pivotIndex); 
        quickSort(pivotIndex + 1, hi); 
    }
}

template <typename T>
void Vector<T>::heapSort(Rank lo, Rank hi) {
    for (Rank i = (hi - lo) / 2 - 1; i >= lo; --i) {
    }

    for (Rank i = hi - 1; i > lo; --i) {
        std::swap(_elem[lo], _elem[i]); 
    }
}

template <typename T>
Rank Vector<T>::find(T const& e, Rank lo, Rank hi) const {
    for (Rank i = lo; i < hi; ++i) {
        if (_elem[i] == e) return i; 
    }
    return -1; 
}

template <typename T>
Rank Vector<T>::search(T const& e, Rank lo, Rank hi) const {
    while (lo < hi) {
        Rank mid = (lo + hi) / 2;
        if (_elem[mid] == e) return mid; 
        else if (_elem[mid] < e) lo = mid + 1; 
        else hi = mid; 
    }
    return -1; 
}
