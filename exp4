#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <climits>
#include <algorithm>

using namespace std;

typedef enum { UNDISCOVERED, DISCOVERED, VISITED } VStatus;

typedef enum { UNDETERMINED, TREE, CROSS, FORWARD, BACKWARD } EType;

class Graph {
private:
    int V;  
    vector<vector<int>> adj; 
    vector<VStatus> vertexStatus; 

public:
    Graph(int V) {
        this->V = V;
        adj.resize(V, vector<int>(V, 0));
        vertexStatus.resize(V, UNDISCOVERED);
    }

    void addEdge(int u, int v, int weight = 1) {
        adj[u][v] = weight;
        adj[v][u] = weight;  
    }

    void printGraph() {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                cout << adj[i][j] << " ";
            }
            cout << endl;
        }
    }


    vector<vector<int>> getAdj() {
        return adj;
    }

    vector<VStatus>& getVertexStatus() {
        return vertexStatus;
    }

    int getVertexCount() {
        return V;
    }
};

char vertexToChar(int v) {
    return 'A' + v;
}

void DFS(Graph &g, int start) {
    vector<VStatus> &status = g.getVertexStatus();
    stack<int> s;
    s.push(start);

    cout << "DFS: ";
    status[start] = DISCOVERED;

    while (!s.empty()) {
        int node = s.top();
        s.pop();
        if (status[node] == UNDISCOVERED) {
            status[node] = VISITED;
            cout << vertexToChar(node) << " ";
        }

        for (int i = 0; i < g.getAdj().size(); i++) {
            if (g.getAdj()[node][i] && status[i] == UNDISCOVERED) {
                s.push(i);
                status[i] = DISCOVERED; 
            }
        }
    }
    cout << endl;
}

void BFS(Graph &g, int start) {
    vector<VStatus> &status = g.getVertexStatus();
    queue<int> q;
    q.push(start);
    status[start] = DISCOVERED;

    cout << "BFS: ";
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << vertexToChar(node) << " ";

        for (int i = 0; i < g.getAdj().size(); i++) {
            if (g.getAdj()[node][i] && status[i] == UNDISCOVERED) {
                q.push(i);
                status[i] = DISCOVERED;
            }
        }
    }
    cout << endl;
}

void dijkstra(Graph &g, int start) {
    int V = g.getVertexCount();
    vector<int> dist(V, INT_MAX);
    vector<int> parent(V, -1);
    vector<bool> visited(V, false);
    dist[start] = 0;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, start});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        if (visited[u]) continue;
        visited[u] = true;

        for (int v = 0; v < V; v++) {
            if (g.getAdj()[u][v] && dist[v] > dist[u] + g.getAdj()[u][v]) {
                dist[v] = dist[u] + g.getAdj()[u][v];
                parent[v] = u;
                pq.push({dist[v], v});
            }
        }
    }

    for (int i = 0; i < V; i++) {
        if (i == start) continue;
        cout << "从 " << vertexToChar(start) << " 到 " << vertexToChar(i) << " 的最短路径是：";
        cout << dist[i] << " 距离, 路径：";
        int node = i;
        stack<char> path;
        while (node != -1) {
            path.push(vertexToChar(node));
            node = parent[node];
        }
        while (!path.empty()) {
            cout << path.top() << " ";
            path.pop();
        }
        cout << endl;
    }
}

void prim(Graph &g) {
    int V = g.getVertexCount();
    vector<bool> inMST(V, false);
    vector<int> key(V, INT_MAX);
    vector<int> parent(V, -1);

    key[0] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, 0});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        if (inMST[u]) continue;
        inMST[u] = true;

        for (int v = 0; v < V; v++) {
            if (g.getAdj()[u][v] && !inMST[v] && g.getAdj()[u][v] < key[v]) {
                key[v] = g.getAdj()[u][v];
                parent[v] = u;
                pq.push({key[v], v});
            }
        }
    }

    cout << "最小生成树的边：" << endl;
    int totalWeight = 0;
    for (int i = 1; i < V; i++) {
        if (parent[i] != -1) {
            cout << "从 " << vertexToChar(parent[i]) << " 到 " << vertexToChar(i) 
                 << " 权重 " << g.getAdj()[parent[i]][i] << endl;
            totalWeight += g.getAdj()[parent[i]][i];
        }
    }
    cout << "最小生成树的总权重为：" << totalWeight << endl;
}

int main() {
    Graph g(6);
    g.addEdge(0, 1, 2);
    g.addEdge(0, 4, 3);
    g.addEdge(1, 2, 4);
    g.addEdge(1, 3, 5);
    g.addEdge(2, 3, 1);
    g.addEdge(3, 4, 2);
    g.addEdge(4, 5, 6);

    cout << "Graph adjacency matrix:" << endl;
    g.printGraph();

    BFS(g, 0);
    DFS(g, 0);
    dijkstra(g, 0);
    prim(g);

    return 0;
}
